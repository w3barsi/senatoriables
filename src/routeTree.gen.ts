/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SigninImport } from './routes/signin'
import { Route as SandboxImport } from './routes/sandbox'
import { Route as GetStartedImport } from './routes/getStarted'
import { Route as DashboardRouteImport } from './routes/dashboard/route'
import { Route as mainRouteImport } from './routes/(main)/route'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardIndexImport } from './routes/dashboard/index'
import { Route as mainSenatorsImport } from './routes/(main)/senators'
import { Route as mainMeImport } from './routes/(main)/$me'
import { Route as mainMeSenatorLinkNameImport } from './routes/(main)/$me_.$senatorLinkName'

// Create/Update Routes

const SigninRoute = SigninImport.update({
  id: '/signin',
  path: '/signin',
  getParentRoute: () => rootRoute,
} as any)

const SandboxRoute = SandboxImport.update({
  id: '/sandbox',
  path: '/sandbox',
  getParentRoute: () => rootRoute,
} as any)

const GetStartedRoute = GetStartedImport.update({
  id: '/getStarted',
  path: '/getStarted',
  getParentRoute: () => rootRoute,
} as any)

const DashboardRouteRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const mainRouteRoute = mainRouteImport.update({
  id: '/(main)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardIndexRoute = DashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => DashboardRouteRoute,
} as any)

const mainSenatorsRoute = mainSenatorsImport.update({
  id: '/senators',
  path: '/senators',
  getParentRoute: () => mainRouteRoute,
} as any)

const mainMeRoute = mainMeImport.update({
  id: '/$me',
  path: '/$me',
  getParentRoute: () => mainRouteRoute,
} as any)

const mainMeSenatorLinkNameRoute = mainMeSenatorLinkNameImport.update({
  id: '/$me_/$senatorLinkName',
  path: '/$me/$senatorLinkName',
  getParentRoute: () => mainRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(main)': {
      id: '/(main)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof mainRouteImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/getStarted': {
      id: '/getStarted'
      path: '/getStarted'
      fullPath: '/getStarted'
      preLoaderRoute: typeof GetStartedImport
      parentRoute: typeof rootRoute
    }
    '/sandbox': {
      id: '/sandbox'
      path: '/sandbox'
      fullPath: '/sandbox'
      preLoaderRoute: typeof SandboxImport
      parentRoute: typeof rootRoute
    }
    '/signin': {
      id: '/signin'
      path: '/signin'
      fullPath: '/signin'
      preLoaderRoute: typeof SigninImport
      parentRoute: typeof rootRoute
    }
    '/(main)/$me': {
      id: '/(main)/$me'
      path: '/$me'
      fullPath: '/$me'
      preLoaderRoute: typeof mainMeImport
      parentRoute: typeof mainRouteImport
    }
    '/(main)/senators': {
      id: '/(main)/senators'
      path: '/senators'
      fullPath: '/senators'
      preLoaderRoute: typeof mainSenatorsImport
      parentRoute: typeof mainRouteImport
    }
    '/dashboard/': {
      id: '/dashboard/'
      path: '/'
      fullPath: '/dashboard/'
      preLoaderRoute: typeof DashboardIndexImport
      parentRoute: typeof DashboardRouteImport
    }
    '/(main)/$me_/$senatorLinkName': {
      id: '/(main)/$me_/$senatorLinkName'
      path: '/$me/$senatorLinkName'
      fullPath: '/$me/$senatorLinkName'
      preLoaderRoute: typeof mainMeSenatorLinkNameImport
      parentRoute: typeof mainRouteImport
    }
  }
}

// Create and export the route tree

interface mainRouteRouteChildren {
  mainMeRoute: typeof mainMeRoute
  mainSenatorsRoute: typeof mainSenatorsRoute
  mainMeSenatorLinkNameRoute: typeof mainMeSenatorLinkNameRoute
}

const mainRouteRouteChildren: mainRouteRouteChildren = {
  mainMeRoute: mainMeRoute,
  mainSenatorsRoute: mainSenatorsRoute,
  mainMeSenatorLinkNameRoute: mainMeSenatorLinkNameRoute,
}

const mainRouteRouteWithChildren = mainRouteRoute._addFileChildren(
  mainRouteRouteChildren,
)

interface DashboardRouteRouteChildren {
  DashboardIndexRoute: typeof DashboardIndexRoute
}

const DashboardRouteRouteChildren: DashboardRouteRouteChildren = {
  DashboardIndexRoute: DashboardIndexRoute,
}

const DashboardRouteRouteWithChildren = DashboardRouteRoute._addFileChildren(
  DashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof mainRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/getStarted': typeof GetStartedRoute
  '/sandbox': typeof SandboxRoute
  '/signin': typeof SigninRoute
  '/$me': typeof mainMeRoute
  '/senators': typeof mainSenatorsRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/$me/$senatorLinkName': typeof mainMeSenatorLinkNameRoute
}

export interface FileRoutesByTo {
  '/': typeof mainRouteRouteWithChildren
  '/getStarted': typeof GetStartedRoute
  '/sandbox': typeof SandboxRoute
  '/signin': typeof SigninRoute
  '/$me': typeof mainMeRoute
  '/senators': typeof mainSenatorsRoute
  '/dashboard': typeof DashboardIndexRoute
  '/$me/$senatorLinkName': typeof mainMeSenatorLinkNameRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(main)': typeof mainRouteRouteWithChildren
  '/dashboard': typeof DashboardRouteRouteWithChildren
  '/getStarted': typeof GetStartedRoute
  '/sandbox': typeof SandboxRoute
  '/signin': typeof SigninRoute
  '/(main)/$me': typeof mainMeRoute
  '/(main)/senators': typeof mainSenatorsRoute
  '/dashboard/': typeof DashboardIndexRoute
  '/(main)/$me_/$senatorLinkName': typeof mainMeSenatorLinkNameRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/getStarted'
    | '/sandbox'
    | '/signin'
    | '/$me'
    | '/senators'
    | '/dashboard/'
    | '/$me/$senatorLinkName'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/getStarted'
    | '/sandbox'
    | '/signin'
    | '/$me'
    | '/senators'
    | '/dashboard'
    | '/$me/$senatorLinkName'
  id:
    | '__root__'
    | '/'
    | '/(main)'
    | '/dashboard'
    | '/getStarted'
    | '/sandbox'
    | '/signin'
    | '/(main)/$me'
    | '/(main)/senators'
    | '/dashboard/'
    | '/(main)/$me_/$senatorLinkName'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  mainRouteRoute: typeof mainRouteRouteWithChildren
  DashboardRouteRoute: typeof DashboardRouteRouteWithChildren
  GetStartedRoute: typeof GetStartedRoute
  SandboxRoute: typeof SandboxRoute
  SigninRoute: typeof SigninRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  mainRouteRoute: mainRouteRouteWithChildren,
  DashboardRouteRoute: DashboardRouteRouteWithChildren,
  GetStartedRoute: GetStartedRoute,
  SandboxRoute: SandboxRoute,
  SigninRoute: SigninRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(main)",
        "/dashboard",
        "/getStarted",
        "/sandbox",
        "/signin"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(main)": {
      "filePath": "(main)/route.tsx",
      "children": [
        "/(main)/$me",
        "/(main)/senators",
        "/(main)/$me_/$senatorLinkName"
      ]
    },
    "/dashboard": {
      "filePath": "dashboard/route.tsx",
      "children": [
        "/dashboard/"
      ]
    },
    "/getStarted": {
      "filePath": "getStarted.tsx"
    },
    "/sandbox": {
      "filePath": "sandbox.tsx"
    },
    "/signin": {
      "filePath": "signin.tsx"
    },
    "/(main)/$me": {
      "filePath": "(main)/$me.tsx",
      "parent": "/(main)"
    },
    "/(main)/senators": {
      "filePath": "(main)/senators.tsx",
      "parent": "/(main)"
    },
    "/dashboard/": {
      "filePath": "dashboard/index.tsx",
      "parent": "/dashboard"
    },
    "/(main)/$me_/$senatorLinkName": {
      "filePath": "(main)/$me_.$senatorLinkName.tsx",
      "parent": "/(main)"
    }
  }
}
ROUTE_MANIFEST_END */
